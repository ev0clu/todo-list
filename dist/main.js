(()=>{"use strict";var e={774:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Hind+Siliguri&display=swap);"]),i.push([e.id,"/* --- Reset CSS --- */\n/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n    display: block;\n}\nbody {\n    line-height: 1;\n}\nol,\nul {\n    list-style: none;\n}\nblockquote,\nq {\n    quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n    content: '';\n    content: none;\n}\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}\n/* --- Reset end --- */\n\n:root {\n    --body-color: #f5f5f4;\n    --header-color: #ef4444;\n    --item-color-hover: #e7e5e4;\n    --border-color: #d6d3d1;\n    --btn-add-color: #ef4444;\n    --btn-cancel-color: #a8a29e;\n    --btn-add-color-hover: #dc2626;\n    --btn-cancel-color-hover: #78716c;\n    --warning-color: #b91c1c;\n    --priority-low-color: #a3e635;\n    --priority-medium-color: #fbbf24;\n    --priority-high-color: #f87171;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Hind Siliguri', sans-serif, 'Segoe UI', Helvetica, Arial, sans-serif,\n        'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', system-ui;\n    min-height: 100vh;\n    min-width: 100vw;\n    font-size: 16px;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--body-color);\n}\n\nheader {\n    width: 100vw;\n    position: fixed;\n    height: 4rem;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    font-size: 2.5rem;\n    font-weight: 900;\n    color: white;\n    background-color: var(--header-color);\n    padding: 1rem 3rem 1rem 3rem;\n}\n\nmain {\n    margin-top: 4rem;\n    flex: 1;\n    display: flex;\n    flex-direction: row;\n    padding: 1rem;\n}\n\n#nav-bar,\n#task-content {\n    padding: 2rem;\n}\n\n#nav-bar {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    gap: 3rem;\n    border-right: 1px solid var(--border-color);\n}\n\n.nav-item {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 0.5rem;\n    height: 2.5rem;\n    font-size: 1.5rem;\n    padding-left: 0.3rem;\n    border-radius: 8px;\n}\n\n#nav-inbox img,\n#nav-today img,\n#nav-week img {\n    height: 70%;\n    width: auto;\n}\n\n#nav-bottom {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n#nav-bottom h1,\n#task-content h1,\n#task-modal-view-title {\n    font-size: 1.5rem;\n    font-weight: 600;\n}\n\n#project-field {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n.project-item {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 0.3rem;\n    border-radius: 8px;\n    font-size: 1rem;\n}\n\n#task-content h1,\n.project-item p,\n.task-item-left label,\n#task-modal-view-title h1 {\n    text-align: start;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n#task-modal-view-title h1 {\n    overflow: scroll;\n    height: 3rem;\n}\n\n.project-item-left p {\n    width: 10rem;\n}\n\n.task-item-left label {\n    width: 35rem;\n}\n\n.nav-item:hover,\n.project-item:hover {\n    background-color: var(--item-color-hover);\n}\n\n.nav-item:hover,\n.project-item button:hover {\n    cursor: pointer;\n}\n\n.nav-item:active,\n.project-item:active {\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\n}\n\n.item-selected {\n    background-color: var(--item-color-hover);\n}\n\n.project-item-left,\n.project-item-right {\n    background: none;\n    border: none;\n    font-size: 1.3rem;\n    height: 2.5rem;\n}\n\n.project-item-left {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 0.5rem;\n    width: 90%;\n}\n\n.project-item-right {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    visibility: hidden;\n}\n\n.project-item:hover > .project-item-right {\n    visibility: visible;\n}\n\n.task-item-right .material-symbols-outlined,\n.project-item .material-symbols-outlined {\n    font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 48;\n}\n\n#btn-new-project-container,\n#btn-new-task-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n#btn-new-project {\n    height: 40px;\n    width: 40px;\n    border-radius: 50%;\n    background: none;\n    border: none;\n    font: inherit;\n    outline: inherit;\n    margin-top: 1rem;\n}\n\n#btn-new-project,\n#btn-new-task {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n}\n\n#btn-new-project:hover,\n#btn-new-task:hover {\n    background-color: var(--item-color-hover);\n    cursor: pointer;\n}\n\n#btn-new-project:active,\n#btn-new-task:active {\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\n}\n\n.material-symbols-outlined {\n    font-variation-settings: 'FILL' 1, 'wght' 500, 'GRAD' 0, 'opsz' 48;\n}\n\n#project-modal-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 0.4rem;\n}\n\n#project-name-input,\n#task-title-input,\n#task-description-input,\n#task-duedate-input {\n    font-family: 'Hind Siliguri', sans-serif, 'Segoe UI', Helvetica, Arial, sans-serif,\n        'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', system-ui;\n    border-radius: 8px;\n    border: 1px solid var(--border-color);\n}\n\n#project-name-input {\n    display: block;\n    font-size: 1.3rem;\n    padding: 0.3rem 0.6rem 0.3rem 0.6rem;\n    width: 100%;\n}\n\n#task-title-input,\n#task-description-input,\n#task-duedate-input {\n    font-size: 1rem;\n    padding: 0.2rem 0.4rem 0.2rem 0.4rem;\n}\n\n#project-warning,\n#task-warning {\n    height: 1rem;\n    color: var(--warning-color);\n    text-align: center;\n}\n\n#btn-project-modal-container,\n#btn-task-modal-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    gap: 1rem;\n}\n\n#btn-add-project:hover,\n#btn-add-task:hover {\n    cursor: pointer;\n    background-color: var(--btn-add-color-hover);\n}\n\n#btn-cancel-project:hover,\n#btn-cancel-task:hover,\n#btn-new-task:hover {\n    cursor: pointer;\n    background-color: var(--btn-cancel-color-hover);\n}\n\n#btn-add-project:active,\n#btn-cancel-project:active,\n#btn-cancel-task:active,\n#btn-new-task:active {\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\n}\n\n#btn-add-project,\n#btn-cancel-project,\n#btn-add-task,\n#btn-cancel-task {\n    border: none;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 1rem;\n    font-weight: 600;\n    color: white;\n    border-radius: 8px;\n    padding: 0.4rem 0.8rem 0.4rem 0.8rem;\n}\n\n#btn-add-project,\n#btn-add-task {\n    width: 5rem;\n    background-color: var(--btn-add-color);\n}\n\n#btn-cancel-project,\n#btn-cancel-task {\n    width: 5rem;\n    background-color: var(--btn-cancel-color);\n}\n\n#btn-new-task {\n    border: none;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 0.3rem;\n    font-size: 1.1rem;\n    font-weight: 600;\n    color: white;\n    border-radius: 8px;\n    padding: 0.6rem 0.3rem 0.6rem 0.3rem;\n    width: 10rem;\n    background-color: var(--btn-cancel-color);\n}\n\n#task-content {\n    flex: 4;\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\n#task-modal-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    position: fixed; /* Position the pop-up fixed on the screen */\n    top: 55%; /* Position the pop-up vertically centered */\n    left: 63%; /* Position the pop-up horizontally centered */\n    transform: translate(-50%, -50%); /* Offset the pop-up to the center of the screen */\n    z-index: 1; /* Make sure the pop-up is on top of other elements */\n}\n\n#task-modal {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n    padding: 2rem; /* Add some padding to the pop-up */\n    border-radius: 8px;\n    background-color: var(--body-color);\n    width: 50%;\n}\n\n.task-modal-input,\n#task-modal > fieldset {\n    display: flex;\n    flex-direction: column;\n    gap: 0.3rem;\n}\n\n#task-modal > fieldset > div {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n#task-modal label,\n#task-content legend {\n    font-size: 1.2rem;\n    font-weight: 500;\n}\n\n.description-input-sublabel {\n    font-size: 0.7rem;\n    font-weight: 100;\n    color: #a0a3a7;\n}\n\n#task-field {\n    display: flex;\n    flex-direction: column;\n    gap: 0.7rem;\n}\n\n.task-item,\n.task-item-left,\n.task-item-right {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n.task-item {\n    gap: 1rem;\n    width: 100%;\n    border: 1px solid grey;\n    padding: 0.5rem;\n    border-radius: 8px;\n}\n\n.task-item-left {\n    justify-content: center;\n    font-size: 1.2rem;\n    gap: 0.5rem;\n}\n\n.task-item-right {\n    justify-content: center;\n    gap: 0.2rem;\n}\n\n.task-item-right .material-symbols-outlined:hover,\n.btn-close-view-task-modal .material-symbols-outlined:hover {\n    font-variation-settings: 'FILL' 1, 'wght' 400, 'GRAD' 0, 'opsz' 48;\n    cursor: pointer;\n}\n\n.btn-task-view,\n.btn-task-edit,\n.btn-task-remove,\n.btn-close-view-task-modal {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    background: none;\n    border: none;\n    font: inherit;\n    outline: inherit;\n}\n\n.task-item-middle {\n    flex: 2;\n    text-align: end;\n}\n\n.priority-low {\n    box-shadow: inset 0.3rem 0 var(--priority-low-color);\n}\n\n.priority-medium {\n    box-shadow: inset 0.3rem 0 var(--priority-medium-color);\n}\n\n.priority-high {\n    box-shadow: inset 0.3rem 0 var(--priority-high-color);\n}\n\n#task-checkbox {\n    cursor: pointer;\n}\n\n.task-done {\n    text-decoration: line-through;\n}\n\n.inactive-header {\n    pointer-events: none;\n}\n\n.inactive {\n    pointer-events: none;\n    background-color: rgba(0, 0, 0, 0.2); /* Black w/ opacity */\n}\n\n#task-view-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    position: fixed; /* Position the pop-up fixed on the screen */\n    top: 50%; /* Position the pop-up vertically centered */\n    left: 63%; /* Position the pop-up horizontally centered */\n    transform: translate(-50%, -50%); /* Offset the pop-up to the center of the screen */\n    z-index: 1; /* Make sure the pop-up is on top of other elements */\n}\n\n#task-modal-view {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n    padding: 2rem; /* Add some padding to the pop-up */\n    border-radius: 8px;\n    background-color: var(--body-color);\n    width: 50%;\n}\n\n.btn-close-view-task-modal {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    right: 25%;\n    top: 2%;\n}\n\n.btn-close-view-task-modal .material-symbols-outlined {\n    font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 48;\n}\n\n#task-informations {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 1rem;\n    font-size: 1.1rem;\n}\n\n#task-modal-view-description,\n#task-modal-view-duedate,\n#task-modal-view-priority {\n    display: flex;\n    flex-direction: column;\n    gap: 0.4rem;\n}\n\n#task-modal-view-description > p:first-child,\n#task-modal-view-duedate > p:first-child,\n#task-modal-view-priority > p:first-child {\n    text-decoration: underline;\n    font-weight: bold;\n}\n\nfooter {\n    /*position: absolute;\n    bottom: 0;*/\n    /*font-family: 'Roboto', sans-serif;*/\n    width: 100%;\n    height: 2.5rem;\n    font-size: 18px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n}\n\n.reflink {\n    width: 25px;\n    text-align: center;\n}\n\n.github-img {\n    width: 20px;\n    height: 20px;\n}\n\n.github-img:hover {\n    width: 25px;\n    height: 25px;\n}\n\n#btn-nav-toggle {\n    display: none;\n}\n\n/* MEDIA QUERIES */\n\n@media (max-width: 1200px) {\n    #task-modal-container,\n    #task-view-container {\n        top: 45%;\n        left: 69%;\n    }\n\n    .task-item {\n        display: grid;\n        grid-template-columns: 3fr 1fr;\n    }\n\n    .task-item-left {\n        justify-content: start;\n    }\n    .task-item-right {\n        grid-column: 1/3;\n    }\n    .task-item-left label {\n        width: 10rem;\n    }\n    #task-modal-view-title h1 {\n        width: 10rem;\n    }\n}\n@media (max-width: 640px) {\n    #btn-nav-toggle {\n        display: flex;\n        justify-content: flex-start;\n        align-items: center;\n        color: white;\n        background: none;\n        border: none;\n        outline: inherit;\n        cursor: pointer;\n        padding: 0;\n    }\n\n    .nav-toggle {\n        font-size: 2.2rem;\n    }\n\n    #nav-bar {\n        margin-top: 4rem;\n        width: 0;\n        position: fixed;\n        z-index: 1;\n        top: 0;\n        left: -3rem;\n        background-color: var(--item-color-hover);\n        overflow-x: hidden;\n        transition: 0.5s;\n        gap: 1rem;\n    }\n\n    .item-selected,\n    .nav-item:hover,\n    .project-item:hover {\n        background-color: var(--body-color);\n    }\n\n    #nav-bar li {\n        transition: 0.3s;\n    }\n\n    header {\n        justify-content: space-between;\n        font-size: 2rem;\n        padding: 1rem 1rem 1rem 1rem;\n        height: 4rem;\n    }\n\n    main {\n        /*flex-direction: column;*/\n        padding: 0;\n    }\n\n    #nav-top {\n        display: flex;\n        flex-direction: column;\n        gap: 0.3rem;\n    }\n\n    #nav-bar,\n    #task-content {\n        padding: 1rem 1rem 1rem 1rem;\n        border: 0;\n    }\n\n    #btn-new-project {\n        height: 20px;\n        width: 20px;\n        margin-top: 0;\n    }\n\n    #task-modal-container,\n    #task-view-container {\n        top: 50%;\n        left: 50%;\n    }\n\n    #task-modal,\n    #task-modal-view {\n        width: 80%;\n    }\n\n    .project-item-right {\n        visibility: visible;\n    }\n\n    .btn-close-view-task-modal {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        position: absolute;\n        right: 15%;\n        top: 5%;\n    }\n\n    .task-item {\n        display: grid;\n        grid-template-columns: 3fr 1fr;\n    }\n\n    .task-item-left {\n        justify-content: start;\n    }\n    .task-item-right {\n        grid-column: 1/3;\n    }\n    .task-item-left label {\n        width: 10rem;\n    }\n    #task-modal-view-title h1 {\n        width: 10rem;\n    }\n}\n","",{version:3,sources:["webpack://./src/assets/style.css"],names:[],mappings:"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",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Hind+Siliguri&display=swap');\n\n/* --- Reset CSS --- */\n/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n    display: block;\n}\nbody {\n    line-height: 1;\n}\nol,\nul {\n    list-style: none;\n}\nblockquote,\nq {\n    quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n    content: '';\n    content: none;\n}\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}\n/* --- Reset end --- */\n\n:root {\n    --body-color: #f5f5f4;\n    --header-color: #ef4444;\n    --item-color-hover: #e7e5e4;\n    --border-color: #d6d3d1;\n    --btn-add-color: #ef4444;\n    --btn-cancel-color: #a8a29e;\n    --btn-add-color-hover: #dc2626;\n    --btn-cancel-color-hover: #78716c;\n    --warning-color: #b91c1c;\n    --priority-low-color: #a3e635;\n    --priority-medium-color: #fbbf24;\n    --priority-high-color: #f87171;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Hind Siliguri', sans-serif, 'Segoe UI', Helvetica, Arial, sans-serif,\n        'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', system-ui;\n    min-height: 100vh;\n    min-width: 100vw;\n    font-size: 16px;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--body-color);\n}\n\nheader {\n    width: 100vw;\n    position: fixed;\n    height: 4rem;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    font-size: 2.5rem;\n    font-weight: 900;\n    color: white;\n    background-color: var(--header-color);\n    padding: 1rem 3rem 1rem 3rem;\n}\n\nmain {\n    margin-top: 4rem;\n    flex: 1;\n    display: flex;\n    flex-direction: row;\n    padding: 1rem;\n}\n\n#nav-bar,\n#task-content {\n    padding: 2rem;\n}\n\n#nav-bar {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    gap: 3rem;\n    border-right: 1px solid var(--border-color);\n}\n\n.nav-item {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 0.5rem;\n    height: 2.5rem;\n    font-size: 1.5rem;\n    padding-left: 0.3rem;\n    border-radius: 8px;\n}\n\n#nav-inbox img,\n#nav-today img,\n#nav-week img {\n    height: 70%;\n    width: auto;\n}\n\n#nav-bottom {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n#nav-bottom h1,\n#task-content h1,\n#task-modal-view-title {\n    font-size: 1.5rem;\n    font-weight: 600;\n}\n\n#project-field {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n.project-item {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 0.3rem;\n    border-radius: 8px;\n    font-size: 1rem;\n}\n\n#task-content h1,\n.project-item p,\n.task-item-left label,\n#task-modal-view-title h1 {\n    text-align: start;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n#task-modal-view-title h1 {\n    overflow: scroll;\n    height: 3rem;\n}\n\n.project-item-left p {\n    width: 10rem;\n}\n\n.task-item-left label {\n    width: 35rem;\n}\n\n.nav-item:hover,\n.project-item:hover {\n    background-color: var(--item-color-hover);\n}\n\n.nav-item:hover,\n.project-item button:hover {\n    cursor: pointer;\n}\n\n.nav-item:active,\n.project-item:active {\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\n}\n\n.item-selected {\n    background-color: var(--item-color-hover);\n}\n\n.project-item-left,\n.project-item-right {\n    background: none;\n    border: none;\n    font-size: 1.3rem;\n    height: 2.5rem;\n}\n\n.project-item-left {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 0.5rem;\n    width: 90%;\n}\n\n.project-item-right {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    visibility: hidden;\n}\n\n.project-item:hover > .project-item-right {\n    visibility: visible;\n}\n\n.task-item-right .material-symbols-outlined,\n.project-item .material-symbols-outlined {\n    font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 48;\n}\n\n#btn-new-project-container,\n#btn-new-task-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n#btn-new-project {\n    height: 40px;\n    width: 40px;\n    border-radius: 50%;\n    background: none;\n    border: none;\n    font: inherit;\n    outline: inherit;\n    margin-top: 1rem;\n}\n\n#btn-new-project,\n#btn-new-task {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n}\n\n#btn-new-project:hover,\n#btn-new-task:hover {\n    background-color: var(--item-color-hover);\n    cursor: pointer;\n}\n\n#btn-new-project:active,\n#btn-new-task:active {\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\n}\n\n.material-symbols-outlined {\n    font-variation-settings: 'FILL' 1, 'wght' 500, 'GRAD' 0, 'opsz' 48;\n}\n\n#project-modal-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 0.4rem;\n}\n\n#project-name-input,\n#task-title-input,\n#task-description-input,\n#task-duedate-input {\n    font-family: 'Hind Siliguri', sans-serif, 'Segoe UI', Helvetica, Arial, sans-serif,\n        'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', system-ui;\n    border-radius: 8px;\n    border: 1px solid var(--border-color);\n}\n\n#project-name-input {\n    display: block;\n    font-size: 1.3rem;\n    padding: 0.3rem 0.6rem 0.3rem 0.6rem;\n    width: 100%;\n}\n\n#task-title-input,\n#task-description-input,\n#task-duedate-input {\n    font-size: 1rem;\n    padding: 0.2rem 0.4rem 0.2rem 0.4rem;\n}\n\n#project-warning,\n#task-warning {\n    height: 1rem;\n    color: var(--warning-color);\n    text-align: center;\n}\n\n#btn-project-modal-container,\n#btn-task-modal-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    gap: 1rem;\n}\n\n#btn-add-project:hover,\n#btn-add-task:hover {\n    cursor: pointer;\n    background-color: var(--btn-add-color-hover);\n}\n\n#btn-cancel-project:hover,\n#btn-cancel-task:hover,\n#btn-new-task:hover {\n    cursor: pointer;\n    background-color: var(--btn-cancel-color-hover);\n}\n\n#btn-add-project:active,\n#btn-cancel-project:active,\n#btn-cancel-task:active,\n#btn-new-task:active {\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\n}\n\n#btn-add-project,\n#btn-cancel-project,\n#btn-add-task,\n#btn-cancel-task {\n    border: none;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 1rem;\n    font-weight: 600;\n    color: white;\n    border-radius: 8px;\n    padding: 0.4rem 0.8rem 0.4rem 0.8rem;\n}\n\n#btn-add-project,\n#btn-add-task {\n    width: 5rem;\n    background-color: var(--btn-add-color);\n}\n\n#btn-cancel-project,\n#btn-cancel-task {\n    width: 5rem;\n    background-color: var(--btn-cancel-color);\n}\n\n#btn-new-task {\n    border: none;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 0.3rem;\n    font-size: 1.1rem;\n    font-weight: 600;\n    color: white;\n    border-radius: 8px;\n    padding: 0.6rem 0.3rem 0.6rem 0.3rem;\n    width: 10rem;\n    background-color: var(--btn-cancel-color);\n}\n\n#task-content {\n    flex: 4;\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\n#task-modal-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    position: fixed; /* Position the pop-up fixed on the screen */\n    top: 55%; /* Position the pop-up vertically centered */\n    left: 63%; /* Position the pop-up horizontally centered */\n    transform: translate(-50%, -50%); /* Offset the pop-up to the center of the screen */\n    z-index: 1; /* Make sure the pop-up is on top of other elements */\n}\n\n#task-modal {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n    padding: 2rem; /* Add some padding to the pop-up */\n    border-radius: 8px;\n    background-color: var(--body-color);\n    width: 50%;\n}\n\n.task-modal-input,\n#task-modal > fieldset {\n    display: flex;\n    flex-direction: column;\n    gap: 0.3rem;\n}\n\n#task-modal > fieldset > div {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n#task-modal label,\n#task-content legend {\n    font-size: 1.2rem;\n    font-weight: 500;\n}\n\n.description-input-sublabel {\n    font-size: 0.7rem;\n    font-weight: 100;\n    color: #a0a3a7;\n}\n\n#task-field {\n    display: flex;\n    flex-direction: column;\n    gap: 0.7rem;\n}\n\n.task-item,\n.task-item-left,\n.task-item-right {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n.task-item {\n    gap: 1rem;\n    width: 100%;\n    border: 1px solid grey;\n    padding: 0.5rem;\n    border-radius: 8px;\n}\n\n.task-item-left {\n    justify-content: center;\n    font-size: 1.2rem;\n    gap: 0.5rem;\n}\n\n.task-item-right {\n    justify-content: center;\n    gap: 0.2rem;\n}\n\n.task-item-right .material-symbols-outlined:hover,\n.btn-close-view-task-modal .material-symbols-outlined:hover {\n    font-variation-settings: 'FILL' 1, 'wght' 400, 'GRAD' 0, 'opsz' 48;\n    cursor: pointer;\n}\n\n.btn-task-view,\n.btn-task-edit,\n.btn-task-remove,\n.btn-close-view-task-modal {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    background: none;\n    border: none;\n    font: inherit;\n    outline: inherit;\n}\n\n.task-item-middle {\n    flex: 2;\n    text-align: end;\n}\n\n.priority-low {\n    box-shadow: inset 0.3rem 0 var(--priority-low-color);\n}\n\n.priority-medium {\n    box-shadow: inset 0.3rem 0 var(--priority-medium-color);\n}\n\n.priority-high {\n    box-shadow: inset 0.3rem 0 var(--priority-high-color);\n}\n\n#task-checkbox {\n    cursor: pointer;\n}\n\n.task-done {\n    text-decoration: line-through;\n}\n\n.inactive-header {\n    pointer-events: none;\n}\n\n.inactive {\n    pointer-events: none;\n    background-color: rgba(0, 0, 0, 0.2); /* Black w/ opacity */\n}\n\n#task-view-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    position: fixed; /* Position the pop-up fixed on the screen */\n    top: 50%; /* Position the pop-up vertically centered */\n    left: 63%; /* Position the pop-up horizontally centered */\n    transform: translate(-50%, -50%); /* Offset the pop-up to the center of the screen */\n    z-index: 1; /* Make sure the pop-up is on top of other elements */\n}\n\n#task-modal-view {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n    padding: 2rem; /* Add some padding to the pop-up */\n    border-radius: 8px;\n    background-color: var(--body-color);\n    width: 50%;\n}\n\n.btn-close-view-task-modal {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    right: 25%;\n    top: 2%;\n}\n\n.btn-close-view-task-modal .material-symbols-outlined {\n    font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 48;\n}\n\n#task-informations {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 1rem;\n    font-size: 1.1rem;\n}\n\n#task-modal-view-description,\n#task-modal-view-duedate,\n#task-modal-view-priority {\n    display: flex;\n    flex-direction: column;\n    gap: 0.4rem;\n}\n\n#task-modal-view-description > p:first-child,\n#task-modal-view-duedate > p:first-child,\n#task-modal-view-priority > p:first-child {\n    text-decoration: underline;\n    font-weight: bold;\n}\n\nfooter {\n    /*position: absolute;\n    bottom: 0;*/\n    /*font-family: 'Roboto', sans-serif;*/\n    width: 100%;\n    height: 2.5rem;\n    font-size: 18px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 10px;\n}\n\n.reflink {\n    width: 25px;\n    text-align: center;\n}\n\n.github-img {\n    width: 20px;\n    height: 20px;\n}\n\n.github-img:hover {\n    width: 25px;\n    height: 25px;\n}\n\n#btn-nav-toggle {\n    display: none;\n}\n\n/* MEDIA QUERIES */\n\n@media (max-width: 1200px) {\n    #task-modal-container,\n    #task-view-container {\n        top: 45%;\n        left: 69%;\n    }\n\n    .task-item {\n        display: grid;\n        grid-template-columns: 3fr 1fr;\n    }\n\n    .task-item-left {\n        justify-content: start;\n    }\n    .task-item-right {\n        grid-column: 1/3;\n    }\n    .task-item-left label {\n        width: 10rem;\n    }\n    #task-modal-view-title h1 {\n        width: 10rem;\n    }\n}\n@media (max-width: 640px) {\n    #btn-nav-toggle {\n        display: flex;\n        justify-content: flex-start;\n        align-items: center;\n        color: white;\n        background: none;\n        border: none;\n        outline: inherit;\n        cursor: pointer;\n        padding: 0;\n    }\n\n    .nav-toggle {\n        font-size: 2.2rem;\n    }\n\n    #nav-bar {\n        margin-top: 4rem;\n        width: 0;\n        position: fixed;\n        z-index: 1;\n        top: 0;\n        left: -3rem;\n        background-color: var(--item-color-hover);\n        overflow-x: hidden;\n        transition: 0.5s;\n        gap: 1rem;\n    }\n\n    .item-selected,\n    .nav-item:hover,\n    .project-item:hover {\n        background-color: var(--body-color);\n    }\n\n    #nav-bar li {\n        transition: 0.3s;\n    }\n\n    header {\n        justify-content: space-between;\n        font-size: 2rem;\n        padding: 1rem 1rem 1rem 1rem;\n        height: 4rem;\n    }\n\n    main {\n        /*flex-direction: column;*/\n        padding: 0;\n    }\n\n    #nav-top {\n        display: flex;\n        flex-direction: column;\n        gap: 0.3rem;\n    }\n\n    #nav-bar,\n    #task-content {\n        padding: 1rem 1rem 1rem 1rem;\n        border: 0;\n    }\n\n    #btn-new-project {\n        height: 20px;\n        width: 20px;\n        margin-top: 0;\n    }\n\n    #task-modal-container,\n    #task-view-container {\n        top: 50%;\n        left: 50%;\n    }\n\n    #task-modal,\n    #task-modal-view {\n        width: 80%;\n    }\n\n    .project-item-right {\n        visibility: visible;\n    }\n\n    .btn-close-view-task-modal {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        position: absolute;\n        right: 15%;\n        top: 5%;\n    }\n\n    .task-item {\n        display: grid;\n        grid-template-columns: 3fr 1fr;\n    }\n\n    .task-item-left {\n        justify-content: start;\n    }\n    .task-item-right {\n        grid-column: 1/3;\n    }\n    .task-item-left label {\n        width: 10rem;\n    }\n    #task-modal-view-title h1 {\n        width: 10rem;\n    }\n}\n"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),n.push(c))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],s=0;s<e.length;s++){var l=e[s],d=o.base?l[0]+o.base:l[0],c=a[d]||0,A="".concat(d," ").concat(c);a[d]=c+1;var u=t(A),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(m);else{var p=r(m,o);o.byIndex=s,n.splice(s,0,{identifier:A,updater:p,references:1})}i.push(A)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var l=o(e,r),d=0;d<a.length;d++){var c=t(a[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),a=t(569),i=t.n(a),s=t(565),l=t.n(s),d=t(216),c=t.n(d),A=t(589),u=t.n(A),m=t(774),p={};function g(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function h(e){return g(1,arguments),e instanceof Date||"object"===f(e)&&"[object Date]"===Object.prototype.toString.call(e)}function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}function v(e){g(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===C(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function b(e){if(g(1,arguments),!h(e)&&"number"!=typeof e)return!1;var n=v(e);return!isNaN(Number(n))}function k(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function y(e,n){g(2,arguments);var t=v(e).getTime(),o=k(n);return new Date(t+o)}function I(e,n){g(2,arguments);var t=k(n);return y(e,-t)}p.styleTagTransform=u(),p.setAttributes=l(),p.insert=i().bind(null,"head"),p.domAPI=r(),p.insertStyleElement=c(),n()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;var B=864e5;function w(e){g(1,arguments);var n=1,t=v(e),o=t.getUTCDay(),r=(o<n?7:0)+o-n;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function x(e){g(1,arguments);var n=v(e),t=n.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(t+1,0,4),o.setUTCHours(0,0,0,0);var r=w(o),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=w(a);return n.getTime()>=r.getTime()?t+1:n.getTime()>=i.getTime()?t:t-1}function E(e){g(1,arguments);var n=x(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var o=w(t);return o}var j=6048e5,T={};function S(){return T}function D(e,n){var t,o,r,a,i,s,l,d;g(1,arguments);var c=S(),A=k(null!==(t=null!==(o=null!==(r=null!==(a=null==n?void 0:n.weekStartsOn)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:c.weekStartsOn)&&void 0!==o?o:null===(l=c.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==t?t:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=v(e),m=u.getUTCDay(),p=(m<A?7:0)+m-A;return u.setUTCDate(u.getUTCDate()-p),u.setUTCHours(0,0,0,0),u}function P(e,n){var t,o,r,a,i,s,l,d;g(1,arguments);var c=v(e),A=c.getUTCFullYear(),u=S(),m=k(null!==(t=null!==(o=null!==(r=null!==(a=null==n?void 0:n.firstWeekContainsDate)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==o?o:null===(l=u.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==t?t:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(A+1,0,m),p.setUTCHours(0,0,0,0);var f=D(p,n),h=new Date(0);h.setUTCFullYear(A,0,m),h.setUTCHours(0,0,0,0);var C=D(h,n);return c.getTime()>=f.getTime()?A+1:c.getTime()>=C.getTime()?A:A-1}function M(e,n){var t,o,r,a,i,s,l,d;g(1,arguments);var c=S(),A=k(null!==(t=null!==(o=null!==(r=null!==(a=null==n?void 0:n.firstWeekContainsDate)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:c.firstWeekContainsDate)&&void 0!==o?o:null===(l=c.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==t?t:1),u=P(e,n),m=new Date(0);m.setUTCFullYear(u,0,A),m.setUTCHours(0,0,0,0);var p=D(m,n);return p}var L=6048e5;function W(e,n){for(var t=e<0?"-":"",o=Math.abs(e).toString();o.length<n;)o="0"+o;return t+o}const N=function(e,n){var t=e.getUTCFullYear(),o=t>0?t:1-t;return W("yy"===n?o%100:o,n.length)},U=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):W(t+1,2)},Y=function(e,n){return W(e.getUTCDate(),n.length)},q=function(e,n){return W(e.getUTCHours()%12||12,n.length)},Q=function(e,n){return W(e.getUTCHours(),n.length)},z=function(e,n){return W(e.getUTCMinutes(),n.length)},O=function(e,n){return W(e.getUTCSeconds(),n.length)},H=function(e,n){var t=n.length,o=e.getUTCMilliseconds();return W(Math.floor(o*Math.pow(10,t-3)),n.length)};var F={G:function(e,n,t){var o=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(o,{width:"abbreviated"});case"GGGGG":return t.era(o,{width:"narrow"});default:return t.era(o,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var o=e.getUTCFullYear(),r=o>0?o:1-o;return t.ordinalNumber(r,{unit:"year"})}return N(e,n)},Y:function(e,n,t,o){var r=P(e,o),a=r>0?r:1-r;return"YY"===n?W(a%100,2):"Yo"===n?t.ordinalNumber(a,{unit:"year"}):W(a,n.length)},R:function(e,n){return W(x(e),n.length)},u:function(e,n){return W(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(o);case"QQ":return W(o,2);case"Qo":return t.ordinalNumber(o,{unit:"quarter"});case"QQQ":return t.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(o,{width:"narrow",context:"formatting"});default:return t.quarter(o,{width:"wide",context:"formatting"})}},q:function(e,n,t){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(o);case"qq":return W(o,2);case"qo":return t.ordinalNumber(o,{unit:"quarter"});case"qqq":return t.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(o,{width:"narrow",context:"standalone"});default:return t.quarter(o,{width:"wide",context:"standalone"})}},M:function(e,n,t){var o=e.getUTCMonth();switch(n){case"M":case"MM":return U(e,n);case"Mo":return t.ordinalNumber(o+1,{unit:"month"});case"MMM":return t.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(o,{width:"narrow",context:"formatting"});default:return t.month(o,{width:"wide",context:"formatting"})}},L:function(e,n,t){var o=e.getUTCMonth();switch(n){case"L":return String(o+1);case"LL":return W(o+1,2);case"Lo":return t.ordinalNumber(o+1,{unit:"month"});case"LLL":return t.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(o,{width:"narrow",context:"standalone"});default:return t.month(o,{width:"wide",context:"standalone"})}},w:function(e,n,t,o){var r=function(e,n){g(1,arguments);var t=v(e),o=D(t,n).getTime()-M(t,n).getTime();return Math.round(o/L)+1}(e,o);return"wo"===n?t.ordinalNumber(r,{unit:"week"}):W(r,n.length)},I:function(e,n,t){var o=function(e){g(1,arguments);var n=v(e),t=w(n).getTime()-E(n).getTime();return Math.round(t/j)+1}(e);return"Io"===n?t.ordinalNumber(o,{unit:"week"}):W(o,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):Y(e,n)},D:function(e,n,t){var o=function(e){g(1,arguments);var n=v(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var o=n.getTime(),r=t-o;return Math.floor(r/B)+1}(e);return"Do"===n?t.ordinalNumber(o,{unit:"dayOfYear"}):W(o,n.length)},E:function(e,n,t){var o=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},e:function(e,n,t,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(n){case"e":return String(a);case"ee":return W(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(e,n,t,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(n){case"c":return String(a);case"cc":return W(a,n.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(e,n,t){var o=e.getUTCDay(),r=0===o?7:o;switch(n){case"i":return String(r);case"ii":return W(r,n.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},a:function(e,n,t){var o=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(e,n,t){var o,r=e.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,n,t){var o,r=e.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var o=e.getUTCHours()%12;return 0===o&&(o=12),t.ordinalNumber(o,{unit:"hour"})}return q(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Q(e,n)},K:function(e,n,t){var o=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(o,{unit:"hour"}):W(o,n.length)},k:function(e,n,t){var o=e.getUTCHours();return 0===o&&(o=24),"ko"===n?t.ordinalNumber(o,{unit:"hour"}):W(o,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):z(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):O(e,n)},S:function(e,n){return H(e,n)},X:function(e,n,t,o){var r=(o._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(n){case"X":return R(r);case"XXXX":case"XX":return X(r);default:return X(r,":")}},x:function(e,n,t,o){var r=(o._originalDate||e).getTimezoneOffset();switch(n){case"x":return R(r);case"xxxx":case"xx":return X(r);default:return X(r,":")}},O:function(e,n,t,o){var r=(o._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+G(r,":");default:return"GMT"+X(r,":")}},z:function(e,n,t,o){var r=(o._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+G(r,":");default:return"GMT"+X(r,":")}},t:function(e,n,t,o){var r=o._originalDate||e;return W(Math.floor(r.getTime()/1e3),n.length)},T:function(e,n,t,o){return W((o._originalDate||e).getTime(),n.length)}};function G(e,n){var t=e>0?"-":"+",o=Math.abs(e),r=Math.floor(o/60),a=o%60;if(0===a)return t+String(r);var i=n||"";return t+String(r)+i+W(a,2)}function R(e,n){return e%60==0?(e>0?"-":"+")+W(Math.abs(e)/60,2):X(e,n)}function X(e,n){var t=n||"",o=e>0?"-":"+",r=Math.abs(e);return o+W(Math.floor(r/60),2)+t+W(r%60,2)}const Z=F;var J=function(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},$=function(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}};const V={p:$,P:function(e,n){var t,o=e.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return J(e,n);switch(r){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",J(r,n)).replace("{{time}}",$(a,n))}};function _(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var K=["D","DD"],ee=["YY","YYYY"];function ne(e){return-1!==K.indexOf(e)}function te(e){return-1!==ee.indexOf(e)}function oe(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var re={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function ae(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,o=e.formats[t]||e.formats[e.defaultWidth];return o}}const ie={date:ae({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:ae({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:ae({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var se={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function le(e){return function(n,t){var o;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,a=null!=t&&t.width?String(t.width):r;o=e.formattingValues[a]||e.formattingValues[r]}else{var i=e.defaultWidth,s=null!=t&&t.width?String(t.width):e.defaultWidth;o=e.values[s]||e.values[i]}return o[e.argumentCallback?e.argumentCallback(n):n]}}const de={ordinalNumber:function(e,n){var t=Number(e),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:le({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:le({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:le({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:le({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:le({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function ce(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,r=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],a=n.match(r);if(!a)return null;var i,s=a[0],l=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(l)?ue(l,(function(e){return e.test(s)})):Ae(l,(function(e){return e.test(s)}));i=e.valueCallback?e.valueCallback(d):d,i=t.valueCallback?t.valueCallback(i):i;var c=n.slice(s.length);return{value:i,rest:c}}}function Ae(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function ue(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}var me,pe={ordinalNumber:(me={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(me.matchPattern);if(!t)return null;var o=t[0],r=e.match(me.parsePattern);if(!r)return null;var a=me.valueCallback?me.valueCallback(r[0]):r[0];a=n.valueCallback?n.valueCallback(a):a;var i=e.slice(o.length);return{value:a,rest:i}}),era:ce({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:ce({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:ce({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:ce({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:ce({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const ge={code:"en-US",formatDistance:function(e,n,t){var o,r=re[e];return o="string"==typeof r?r:1===n?r.one:r.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:ie,formatRelative:function(e,n,t,o){return se[e]},localize:de,match:pe,options:{weekStartsOn:0,firstWeekContainsDate:1}};var fe=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,he=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ce=/^'([^]*?)'?$/,ve=/''/g,be=/[a-zA-Z]/;function ke(e,n,t){var o,r,a,i,s,l,d,c,A,u,m,p,f,h,C,y,B,w;g(2,arguments);var x=String(n),E=S(),j=null!==(o=null!==(r=null==t?void 0:t.locale)&&void 0!==r?r:E.locale)&&void 0!==o?o:ge,T=k(null!==(a=null!==(i=null!==(s=null!==(l=null==t?void 0:t.firstWeekContainsDate)&&void 0!==l?l:null==t||null===(d=t.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==s?s:E.firstWeekContainsDate)&&void 0!==i?i:null===(A=E.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var D=k(null!==(m=null!==(p=null!==(f=null!==(h=null==t?void 0:t.weekStartsOn)&&void 0!==h?h:null==t||null===(C=t.locale)||void 0===C||null===(y=C.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==f?f:E.weekStartsOn)&&void 0!==p?p:null===(B=E.locale)||void 0===B||null===(w=B.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==m?m:0);if(!(D>=0&&D<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!j.localize)throw new RangeError("locale must contain localize property");if(!j.formatLong)throw new RangeError("locale must contain formatLong property");var P=v(e);if(!b(P))throw new RangeError("Invalid time value");var M=_(P),L=I(P,M),W={firstWeekContainsDate:T,weekStartsOn:D,locale:j,_originalDate:P},N=x.match(he).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,V[n])(e,j.formatLong):e})).join("").match(fe).map((function(o){if("''"===o)return"'";var r=o[0];if("'"===r)return ye(o);var a=Z[r];if(a)return null!=t&&t.useAdditionalWeekYearTokens||!te(o)||oe(o,n,String(e)),null!=t&&t.useAdditionalDayOfYearTokens||!ne(o)||oe(o,n,String(e)),a(L,o,j.localize,W);if(r.match(be))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return o})).join("");return N}function ye(e){var n=e.match(Ce);return n?n[1].replace(ve,"'"):e}const Ie=(()=>{const e=(e,n)=>{const t=document.createElement("label");return t.htmlFor=e,t.textContent=n,t},n=(e,n,t,o,r)=>{const a=document.createElement("input");return a.classList.add(e),a.name=n,a.id=t,a.type=o,a.required=r,a},t=e=>{const n=document.createElement("p");return n.id=e,n},o=e=>{const n=document.createElement("button");return n.id=e,n.textContent="Add",n},r=e=>{const n=document.createElement("button");return n.id=e,n.textContent="Cancel",n},a=(e,n)=>{const t=document.createElement("button");t.classList.add(e);const o=document.createElement("span");return o.classList.add("material-symbols-outlined"),o.textContent=n,t.appendChild(o),t};return{errorMsgProjectExist:()=>{document.getElementById("project-warning").textContent="Project already exist"},errorMsgProjectFieldEmpty:()=>{document.getElementById("project-warning").textContent="Project name is missing"},createProjectModal:()=>{const e=document.getElementById("project-modal-container"),a=document.createElement("div");a.id="btn-project-modal-container",a.appendChild(o("btn-add-project")),a.appendChild(r("btn-cancel-project")),e.appendChild(n("project-name-input","project-name-input","project-name-input","text")),e.appendChild(t("project-warning")),e.appendChild(a)},createProjectItem:(e,n)=>{const t=document.createElement("li");t.classList.add("project-item"),t.setAttribute("data-projectindex",`${n}`);const o=a("project-item-left","checklist"),r=document.createElement("p");r.textContent=e.getProjectName(),o.appendChild(r);const i=a("project-item-right","delete");return t.append(o,i),t},errorMsgTaskExist:()=>{document.getElementById("task-warning").textContent="Task already exist"},errorMsgTaskFieldEmpty:()=>{document.getElementById("task-warning").textContent="Task name is missing"},createTaskHeaderText:e=>{document.getElementById("task-content").children[0].textContent=e},createTaskModal:()=>{const a=document.getElementById("task-modal-container"),i=document.createElement("form");i.id="task-modal",i.method="post";const s=document.createElement("div");s.classList.add("task-modal-input"),s.appendChild(e("task-title-input","Title*"));const l=n("task-title-input","task-title-input","task-title-input","text",!0);s.appendChild(l);const d=document.createElement("div");d.classList.add("task-modal-input");const c=e("task-description-input","Description"),A=document.createElement("span");A.classList.add("description-input-sublabel"),A.textContent=" (optional)",c.appendChild(A),d.appendChild(c),d.appendChild(((e,n,t,o,r)=>{const a=document.createElement("textarea");return a.name="task-description-input",a.id="task-description-input",a.rows="3",a.cols="30",a.style.resize="none",a})());const u=document.createElement("div");u.classList.add("task-modal-input"),u.appendChild(e("task-duedate-input","Due Date*")),u.appendChild(n("task-duedate-input","task-duedate-input","task-duedate-input","date",!0));const m=document.createElement("div");m.appendChild(n("task-priority","task-priority","task-priority-low","radio",!0)),m.appendChild(e("task-priority-low","Low"));const p=document.createElement("div");p.appendChild(n("task-priority","task-priority","task-priority-medium","radio",!0)),p.appendChild(e("task-priority-medium","Medium"));const g=document.createElement("div");g.appendChild(n("task-priority","task-priority","task-priority-high","radio",!0)),g.appendChild(e("task-priority-high","High"));const f=document.createElement("fieldset"),h=document.createElement("legend");h.textContent="Select Priority*",f.append(h,m,p,g);const C=document.createElement("div");C.id="btn-task-modal-container",C.appendChild(o("btn-add-task")),C.appendChild(r("btn-cancel-task")),i.appendChild(s),i.appendChild(d),i.appendChild(u),i.appendChild(f),i.appendChild(t("task-warning")),i.appendChild(C),a.appendChild(i)},createTaskItem:(n,t,o,r,i,s)=>{const l=document.createElement("li");l.classList.add("task-item"),l.setAttribute("data-projectindex",`${o}`),l.setAttribute("data-taskindex",`${r}`),l.classList.add(`priority-${s}`);const d=document.createElement("div");d.classList.add("task-item-left");const c=document.createElement("div");c.classList.add("task-item-middle"),c.textContent=i;const A=document.createElement("div");A.classList.add("task-item-right");const u=`${o}${r}${(e=>{let n="";const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",o=t.length;let r=0;for(;r<10;)n+=t.charAt(Math.floor(Math.random()*o)),r+=1;return n})()}`,m=((e,n)=>{const t=document.createElement("input");return t.name=e,t.id=e,t.type="checkbox",t.checked=n,t.classList.add("task-checkbox"),t})(u,n),p=e(u,t);return m.checked&&p.classList.add("task-done"),d.append(m,p),A.append(a("btn-task-view","visibility"),a("btn-task-edit","edit"),a("btn-task-remove","delete")),l.append(d,c,A),l},replaceTaskItem:(e,n,t,o)=>{const r=e;r.firstChild.lastChild.textContent=n,r.children[1].textContent=t,r.className="",r.className=`task-item priority-${o}`},createViewTaskModal:(e,n,t,o,r)=>{const i=document.getElementById("task-view-container"),s=document.createElement("div");s.id="task-modal-view";const l=document.createElement("div");l.id="task-informations";const d=document.createElement("div");d.id="task-modal-view-title";const c=document.createElement("h1");c.textContent=e,d.appendChild(c);const A=document.createElement("div");A.id="task-modal-view-description";const u=document.createElement("p");u.textContent="Description:";const m=document.createElement("p");m.textContent=n,A.append(u,m);const p=document.createElement("div");p.id="task-modal-view-duedate";const g=document.createElement("p");g.textContent="Due Date:";const f=document.createElement("p");f.textContent=t,p.append(g,f);const h=document.createElement("div");h.id="task-modal-view-priority";const C=document.createElement("p");C.textContent="Priority:";const v=document.createElement("p");v.textContent=o,h.append(C,v),l.appendChild(A),l.appendChild(p),l.appendChild(h),s.appendChild(a("btn-close-view-task-modal","cancel")),s.appendChild(d),s.appendChild(l),i.appendChild(s)}}})(),Be=e=>{const n=[],t=()=>n;return{getProjectName:()=>e,getTasks:t,addTask:e=>t().push(e),getTaskName:e=>t()[e].name,getTaskDescription:e=>t()[e].description,getTaskDueDate:e=>t()[e].dueDate,getTaskPriority:e=>t()[e].priority,getTaskStatus:e=>t()[e].status,getTasksName:()=>t().map((e=>e.name)),setTaskName:(e,n)=>(t()[e].name=n,t()[e].name),setTaskDescription:(e,n)=>(t()[e].description=n,t()[e].description),seTaskDueDate:(e,n)=>(t()[e].dueDate=n,t()[e].dueDate),setTaskPriority:(e,n)=>(t()[e].priority=n,t()[e].priority),removeTask:e=>t().splice(e,1),isTaskExist:e=>t().some((n=>n.name===e)),toggleTaskStatus:(e,n)=>{t()[e].status=n}}},we=(()=>{const e=[],n=()=>e;return{getProjects:n,addProject:e=>n().push(e),removeProject:e=>n().splice(e,1),isProjectExist:e=>n().some((n=>n.getProjectName()===e))}})(),xe=(e,n,t,o,r=!1)=>{let a=e,i=n,s=t,l=o,d=r;return{get name(){return a},set name(e){a=e},get description(){return i},set description(e){i=e},get dueDate(){return s},set dueDate(e){s=e},get priority(){return l},set priority(e){l=e},get status(){return d},set status(e){d=e}}},Ee=e=>{let n=[];return{get projectName(){return e},set addTask(e){n.push(e)},set replaceTaskArray(e){n=e},get taskArray(){return n}}},je=(()=>{const e=[];return{saveLocal:(n,t,o,r)=>{if("add-project"===r){const t=Ee(n);e.push(t)}else if("remove-project"===r)e.splice(t,1);else if("add-task"===r)e[t].addTask=n;else if("replace-tasks"===r)e[t].replaceTaskArray=n;else if("remove-task"===r){const n=e[t].taskArray;n.splice(o,1),e[t].replaceTaskArray=n}console.log("save: ",e),localStorage.setItem("Projects",JSON.stringify(e))},restoreLocal:()=>{let n=!1,t=JSON.parse(localStorage.getItem("Projects"));if(null==t)t=[];else{n=!0;for(let n=0;n<t.length;n++){const o=Ee(t[n].projectName);e.push(o);const r=document.getElementById("project-field"),a=Be(e[n].projectName);we.addProject(a),r.appendChild(Ie.createProjectItem(a,n));for(let o=0;o<t[n].taskArray.length;o++){const r=xe(t[n].taskArray[o].name,t[n].taskArray[o].description,t[n].taskArray[o].dueDate,t[n].taskArray[o].priority,t[n].taskArray[o].status);e[n].addTask=r,we.getProjects()[n].addTask(r),console.log(e)}}}return n}}})(),Te=(()=>{const e=e=>{let n=!1;const t=new Date,o=new Date(t),r=o.getDay(),a=o.getDate()-r+(0===r?-6:1),i=new Date(o.setDate(a)),s=new Date(i);return s.setDate(s.getDate()+6),e>=ke(i,"yyyy-MM-dd")&&e<=ke(s,"yyyy-MM-dd")&&(n=!0),n},n=(e,n,t,o,r,a)=>{const i=xe(t,o,r,a);e[n].addTask(i),je.saveLocal(i,n,"","add-task")},t=e=>{const n=Be(e);we.addProject(n),je.saveLocal(e,"","","add-project")},o=()=>{const e=document.getElementById("project-modal-container"),n=document.getElementById("btn-new-project");e.textContent="",n.style.display="flex"},r=e=>{const n=document.getElementById("project-field");n.textContent="";let t=0;e.forEach((e=>{n.appendChild(Ie.createProjectItem(e,t)),t+=1}))};return{toggleNavBar:()=>{const e=document.getElementById("nav-bar"),n=document.querySelector(".nav-toggle");e.classList.contains("active")?(e.classList.remove("active"),e.style.width="0",e.style.left="-3rem",n.textContent="menu"):(e.classList.add("active"),e.style.width="100vw",e.style.left="0",n.textContent="close")},toggleNodeState:()=>{const e=document.querySelector("header"),n=document.querySelector("main"),t=document.querySelector("footer");e.classList.toggle("inactive-header"),n.classList.toggle("inactive"),t.classList.toggle("inactive")},getTaskPriority:e=>{let n="";for(let t=0;t<e.length;t++)if(e[t].checked){switch(e[t].id){case"task-priority-low":n="low";break;case"task-priority-medium":n="medium";break;case"task-priority-high":n="high"}break}return n},addNewProject:t,removeProject:e=>{const n=document.getElementById("project-field");we.removeProject(e),n.textContent="",je.saveLocal("",e,"","remove-project")},removeProjectModal:o,updateProjectList:r,removeItemSelection:e=>{e.forEach((e=>{e.classList.remove("item-selected")}))},addNewTask:n,removeTask:(e,n,t)=>{e[n].removeTask(t),je.saveLocal("",n,t,"remove-task")},loadDefaultTodoList:()=>{t("Learn web developement"),n(we.getProjects(),0,"Git Basics","Get the basic workflow for using Git, which should enhance the understanding and demonstrate why Git is so useful.","2023-02-06","high"),n(we.getProjects(),0,"HTML and CSS","Get a basic overview of HTML, CSS and how they work together. Learn more about responsive design, animation, media quieries.","2023-02-28","high"),n(we.getProjects(),0,"Javascript","Get a basic overview of Javascript, such as variables, operators, functions. Learn about factory functions, modul pattern, javascript modules, API.","2023-03-30","medium"),t("Learn React"),n(we.getProjects(),1,"React basics","Lear React: hook, lifecycle methods etc.","2023-08-10","low"),t("Household tasks"),n(we.getProjects(),2,"Car wash","Car wash","2023-02-12","low"),n(we.getProjects(),2,"Bill payment","Electric, Gas, Internet.","2023-02-25","medium"),n(we.getProjects(),2,"Insurances payment","House, Car.","2023-02-12","high"),n(we.getProjects(),2,"Cut the grass","Cut the grass.","2023-03-13","low"),r(we.getProjects())},replaceTask:(n,t,o,r,a,i,s,l)=>{const d=document.getElementById("nav-today"),c=document.getElementById("nav-week"),A=ke(new Date,"yyyy-MM-dd");n.setTaskName(o,r),n.setTaskDescription(o,a),n.seTaskDueDate(o,i),n.setTaskPriority(o,s),je.saveLocal(n.getTasks(),t,"","replace-tasks"),d.classList.contains("item-selected")?A!==i?l.remove():Ie.replaceTaskItem(l,r,i,s):c.classList.contains("item-selected")?e(i)?Ie.replaceTaskItem(l,r,i,s):l.remove():Ie.replaceTaskItem(l,r,i,s)},openTaskModal:()=>{o(),Ie.createTaskModal()},loadTaskInformations:(e,n,t,o)=>{const r=document.getElementById("task-title-input"),a=document.getElementById("task-description-input"),i=document.getElementById("task-duedate-input"),s=document.querySelectorAll(".task-priority");r.value=e,a.value=n,i.value=t,((e,n)=>{let t="";for(let o=0;o<e.length;o++)if(-1!==e[o].id.indexOf(n)){t=e[o];break}return t})(s,o).checked=!0},updateTaskList:(n,t,o)=>{const r=document.getElementById("task-field");if("project-item"===o&&(r.textContent=""),"project-item"===o||"nav-inbox"===o)for(let e=0;e<n[t].getTasks().length;e++)r.appendChild(Ie.createTaskItem(n[t].getTaskStatus(e),n[t].getTaskName(e),t,e,n[t].getTaskDueDate(e),n[t].getTaskPriority(e)));else if("nav-today"===o){const e=ke(new Date,"yyyy-MM-dd");for(let o=0;o<n[t].getTasks().length;o++)e===n[t].getTaskDueDate(o)&&r.appendChild(Ie.createTaskItem(n[t].getTaskStatus(o),n[t].getTaskName(o),t,o,n[t].getTaskDueDate(o),n[t].getTaskPriority(o)))}else if("nav-week"===o)for(let o=0;o<n[t].getTasks().length;o++)e(n[t].getTaskDueDate(o))&&r.appendChild(Ie.createTaskItem(n[t].getTaskStatus(o),n[t].getTaskName(o),t,o,n[t].getTaskDueDate(o),n[t].getTaskPriority(o)))},removeTaskModal:()=>{document.getElementById("task-modal-container").textContent=""},toggleNewTaskButton:e=>{const n=document.getElementById("btn-new-task"),t=document.querySelectorAll("li");e>0&&!t[0].classList.contains("item-selected")&&!t[1].classList.contains("item-selected")&&!t[2].classList.contains("item-selected")?n.style.display="flex":e<=0&&(n.style.display="none")},removeViewTaskModal:()=>{document.getElementById("task-view-container").textContent=""},toggleCheckboxLabelState:(e,n,t,o,r)=>{const a=document.querySelector(`label[for="${t}"]`);r?(a.classList.add("task-done"),e[n].toggleTaskStatus(o,!0)):(a.classList.remove("task-done"),e[n].toggleTaskStatus(o,!1)),je.saveLocal(e[n].getTasks(),n,"","replace-tasks")}}})(),Se=(()=>{const e=()=>{document.getElementById("nav-inbox").click()},n=e=>{const n=document.querySelectorAll(".btn-task-view"),t=document.getElementById("btn-new-task");n.forEach((n=>{n.addEventListener("click",(()=>{const o=n.parentNode.parentNode.dataset.taskindex,r=n.parentNode.parentNode.dataset.projectindex;t.style.display="none",Te.removeProjectModal(),Te.toggleNodeState(),Ie.createViewTaskModal(e[r].getTaskName(o),e[r].getTaskDescription(o),e[r].getTaskDueDate(o),e[r].getTaskPriority(o)),document.querySelector(".btn-close-view-task-modal").addEventListener("click",(()=>{Te.removeViewTaskModal(),Te.toggleNodeState(),Te.toggleNewTaskButton(we.getProjects().length)}))}))}))},t=e=>{const n=document.querySelectorAll(".btn-task-edit"),t=document.getElementById("btn-new-task");n.forEach((n=>{n.addEventListener("click",(o=>{t.style.display="none";const r=n.parentNode.parentNode.dataset.taskindex,a=n.parentNode.parentNode.dataset.projectindex,i=e[a].getTaskName(r),s=e[a].getTaskDescription(r),l=e[a].getTaskDueDate(r),d=e[a].getTaskPriority(r);Te.removeProjectModal(),Te.openTaskModal(),Te.loadTaskInformations(i,s,l,d),Te.toggleNodeState(),((e,n,t)=>{const o=document.querySelector("form"),r=document.getElementById("btn-cancel-task"),a=document.getElementById("task-title-input"),i=document.getElementById("task-description-input"),s=document.getElementById("task-duedate-input"),l=document.querySelectorAll(".task-priority");o.addEventListener("submit",(o=>{o.preventDefault();const r=we.getProjects()[e];if(r.isTaskExist(a.value))if(r.getTasksName().indexOf(a.value)!==Number(n))Ie.errorMsgTaskExist();else{const o=Te.getTaskPriority(l);Te.replaceTask(r,e,n,a.value,i.value,s.value,o,t),Te.removeTaskModal(),Te.toggleNodeState(),Te.toggleNewTaskButton(we.getProjects().length)}else if(null!==a.value.match(/^ *$/))Ie.errorMsgTaskFieldEmpty();else{const o=Te.getTaskPriority(l);Te.replaceTask(r,e,n,a.value,i.value,s.value,o,t),Te.removeTaskModal(),Te.toggleNodeState(),Te.toggleNewTaskButton(we.getProjects().length)}})),r.addEventListener("click",(e=>{e.preventDefault(),Te.removeTaskModal(),Te.toggleNodeState(),Te.toggleNewTaskButton(we.getProjects().length)}))})(a,r,o.target.parentNode.parentNode.parentNode)}))}))},o=e=>{document.querySelectorAll(".task-checkbox").forEach((n=>{n.addEventListener("change",(()=>{const t=n.parentNode.parentNode.dataset.taskindex,o=n.parentNode.parentNode.dataset.projectindex;n.checked?Te.toggleCheckboxLabelState(e,o,n.id,t,!0):Te.toggleCheckboxLabelState(e,o,n.id,t,!1)}))}))},r=(e,a)=>{const i=document.querySelectorAll(".btn-task-remove"),s=document.getElementById("task-field");i.forEach((i=>{i.addEventListener("click",(()=>{const l=i.parentNode.parentNode.dataset.taskindex,d=i.parentNode.parentNode.dataset.projectindex;if(Te.removeTaskModal(),Te.removeTask(e,d,l),s.textContent="","nav-inbox"===a||"nav-today"===a||"nav-week"===a){let i=!1;for(let n=0;n<e.length;n++){for(let t=0;t<e[n].getTasks().length;t++)if(e[n].getTasks().length>0){i=!0;break}if(!0===i)break}if(!0===i){for(let n=0;n<e.length;n++)Te.updateTaskList(e,n,a);o(e),n(e),t(e),r(e,a)}else s.textContent=""}else"project-item"===a&&(e[d].getTasks().length>0?(Te.updateTaskList(e,d,"project-item"),o(e),n(e),t(e),r(e,a)):s.textContent="")}))}))},a=()=>{const e=document.querySelectorAll("li"),a=document.querySelectorAll(".project-item-left"),i=(document.getElementById("project-field"),document.getElementById("btn-new-project"));let s=we.getProjects();a.forEach((a=>{a.addEventListener("click",(()=>{i.style.display="flex",Te.removeItemSelection(e),Te.toggleNewTaskButton(s.length),a.parentNode.classList.add("item-selected"),s=we.getProjects();const l=a.parentNode.dataset.projectindex;Ie.createTaskHeaderText(s[l].getProjectName()),Te.updateTaskList(s,l,"project-item"),o(s),n(s),t(s),r(s,"project-item")}))}))},i=()=>{const n=document.querySelectorAll(".project-item-right"),t=(document.getElementById("project-field"),document.getElementById("task-field"));n.forEach((n=>{const o=document.querySelectorAll("li");n.addEventListener("click",(()=>{if(Te.removeProject(n.parentNode.dataset.projectindex),we.getProjects().length>0)Te.updateProjectList(we.getProjects()),a(),i(),e();else{Te.toggleNewTaskButton(we.getProjects().length),t.textContent="";for(let e=0;e<o.length;e++)if(o[e].classList.contains("item-selected")){o[e].classList.remove("item-selected");break}o[0].classList.add("item-selected"),Ie.createTaskHeaderText(o[0].children[1].textContent)}}))}))};return{initialEventListener:()=>{(()=>{const e=document.getElementById("btn-new-project");Te.toggleNewTaskButton(we.getProjects().length),e.addEventListener("click",(()=>{e.style.display="none",Ie.createProjectModal(),(()=>{const e=document.getElementById("btn-add-project"),n=document.getElementById("btn-cancel-project"),t=document.getElementById("project-name-input"),o=document.getElementById("btn-new-project");e.addEventListener("click",(()=>{we.isProjectExist(t.value)?Ie.errorMsgProjectExist():null===t.value||null!==t.value.match(/^ *$/)?Ie.errorMsgProjectFieldEmpty():(Te.addNewProject(t.value),Te.updateProjectList(we.getProjects()),Te.removeProjectModal(),a(),i())})),t.addEventListener("keydown",(n=>{"Enter"===n.key&&e.click()})),n.addEventListener("click",(()=>{Te.removeProjectModal(),o.style.display="flex"}))})()}))})(),(()=>{const e=document.getElementById("btn-new-task");e.addEventListener("click",(()=>{e.style.display="none",Te.openTaskModal(),Te.toggleNodeState(),(()=>{const e=document.querySelector("form"),a=document.getElementById("btn-cancel-task"),i=document.getElementById("task-title-input"),s=document.getElementById("task-description-input"),l=document.getElementById("task-duedate-input"),d=document.querySelectorAll(".task-priority"),c=document.querySelectorAll(".project-item");e.addEventListener("submit",(e=>{e.preventDefault();for(let e=0;e<c.length;e++)if(c[e].classList.contains("item-selected")){const a=c[e].dataset.projectindex,A=we.getProjects();if(A[a].isTaskExist(i.value))Ie.errorMsgTaskExist();else{if(null===i.value.match(/^ *$/)){const e=Te.getTaskPriority(d);Te.addNewTask(A,a,i.value,s.value,l.value,e),Te.updateTaskList(A,a,"project-item"),Te.removeTaskModal(),Te.toggleNodeState(),Te.toggleNewTaskButton(we.getProjects().length),o(A),n(A),t(A),r(A,"project-item");break}Ie.errorMsgTaskFieldEmpty()}}})),a.addEventListener("click",(e=>{e.preventDefault(),Te.removeTaskModal(),Te.toggleNodeState(),Te.toggleNewTaskButton(we.getProjects().length)}))})()}))})(),document.querySelectorAll(".nav-item").forEach((e=>{e.addEventListener("click",(()=>{const a=we.getProjects(),i=document.querySelectorAll("li");if(Te.removeProjectModal(),Te.removeItemSelection(i),Te.toggleNewTaskButton(-1),e.classList.add("item-selected"),Ie.createTaskHeaderText(e.lastElementChild.textContent),document.getElementById("task-field").textContent="","nav-inbox"===e.id)for(let e=0;e<a.length;e++)Te.updateTaskList(a,e,"nav-inbox");else if("nav-today"===e.id)for(let e=0;e<a.length;e++)Te.updateTaskList(a,e,"nav-today");else if("nav-week"===e.id)for(let e=0;e<a.length;e++)Te.updateTaskList(a,e,"nav-week");o(a),n(a),t(a),r(a,e.id),Te.toggleNewTaskButton(null)}))})),e(),document.getElementById("btn-nav-toggle").addEventListener("click",(()=>{Te.toggleNavBar()})),a(),i()}}})(),De=Se;je.restoreLocal()||Te.loadDefaultTodoList(),De.initialEventListener()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,